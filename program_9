package BM23AI170;
interface StackOperations {
    void push(int item);
    int pop();
    boolean isEmpty();
    boolean isFull();
}

class FixedLengthStack implements StackOperations {
    private int[] stack;
    private int top;
    private int capacity;

    public FixedLengthStack(int size) {
        stack = new int[size];
        capacity = size;
        top = -1;
    }

    public void push(int item) {
        if (isFull()) {
            System.out.println("Stack Overflow");
            return;
        }
        stack[++top] = item;
    }

    public int pop() {
        if (isEmpty()) {
            System.out.println("Stack Underflow");
            return -1;
        }
        return stack[top--];
    }

    public boolean isEmpty() {
        return top == -1;
    }

    public boolean isFull() {
        return top == capacity - 1;
    }

    public void display() {
        if (isEmpty()) {
            System.out.println("Stack is empty (Fixed)");
            return;
        }
        System.out.print("Fixed Stack: ");
        for (int i = 0; i <= top; i++) {
            System.out.print(stack[i] + " ");
        }
        System.out.println();
    }
}

class DynamicLengthStack implements StackOperations {
    private int[] stack;
    private int top;
    private int capacity;

    public DynamicLengthStack(int size) {
        stack = new int[size];
        capacity = size;
        top = -1;
    }

    public void push(int item) {
        if (isFull()) {
            resize();
        }
        stack[++top] = item;
    }

    private void resize() {
        capacity *= 2;
        int[] newStack = new int[capacity];
        System.arraycopy(stack, 0, newStack, 0, stack.length);
        stack = newStack;
        System.out.println("Stack resized to capacity: " + capacity);
    }

    public int pop() {
        if (isEmpty()) {
            System.out.println("Stack Underflow");
            return -1;
        }
        return stack[top--];
    }

    public boolean isEmpty() {
        return top == -1;
    }

    public boolean isFull() {
        return top == capacity - 1;
    }

    public void display() {
        if (isEmpty()) {
            System.out.println("Stack is empty (Dynamic)");
            return;
        }
        System.out.print("Dynamic Stack: ");
        for (int i = 0; i <= top; i++) {
            System.out.print(stack[i] + " ");
        }
        System.out.println();
    }
}

public class Interface {
    public static void main(String[] args) {
        StackOperations fixedStack = new FixedLengthStack(5);
        StackOperations dynamicStack = new DynamicLengthStack(5);

        System.out.println("Using Fixed-Length Stack:");
        testStack(fixedStack);

        System.out.println("\nUsing Dynamic-Length Stack:");
        testStack(dynamicStack);
    }

    public static void testStack(StackOperations stack) {
        for (int i = 1; i <= 7; i++) {
            System.out.println("Pushing: " + i);
            stack.push(i);
        }

        if (stack instanceof FixedLengthStack) {
            ((FixedLengthStack) stack).display();
        } else if (stack instanceof DynamicLengthStack) {
            ((DynamicLengthStack) stack).display();
        }

        System.out.println("Popping elements:");
        for (int i = 0; i < 3; i++) {
            int popped = stack.pop();
            System.out.println("Popped: " + popped);
        }

        if (stack instanceof FixedLengthStack) {
            ((FixedLengthStack) stack).display();
        } else if (stack instanceof DynamicLengthStack) {
            ((DynamicLengthStack) stack).display();
        }
    }
}
